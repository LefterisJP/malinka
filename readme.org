#+DESCRIPTION: A C/C++ project configuration package for Emacs

* Information
Malinka is a project management Emacs package for C/C++

It uses rtags to help the user jump around the code easily and without the
mistaken tag jumping that other taggers frequently have with C/C++ code.
The main functionality that malinka provides is to properly populate and communicate the
compiler commands to the rtags daemons depending on the project you are working
on.

Optionally and if you also have flycheck with the clang syntax-checker activated
malinka will communicate to flycheck's clang syntax checker the appropriate
cpp-defines and include paths so that flycheck can do its syntax checking.

If you have not installed rtags yet, visit their [[https://github.com/Andersbakken/rtags][github page]] and read more information
about how you can acquire and use rtags. Alternatively if you used [[https://github.com/dimitri/el-get][el-get]] to get malinka
rtags should have been downloaded and built as a dependency

The way to define a project is by using `malinka-define-project' and to provide
the basic attributes that a project needs.  For more information you can read
the function's docstring.

* Example Setup
:PROPERTIES:
:CUSTOM_ID: example_setup
:END:
Working with malinka requires that you define your project somewhere in your emacs
file using `malinka-define-project'.
#+BEGIN_SRC emacs-lisp
(require 'malinka)


(malinka-define-project
 :name "Refulib"
 :cpp-defines '("REFU_COMPILING" "REFU_LINUX_VERSION" "REFU_TEST"
                "RF_MODULE_DF_XML" "RF_MODULE_DS_ARRAY" "RF_MODULE_DS_BARRAY"
                "RF_MODULE_DS_LIST" "RF_MODULE_IO" "RF_MODULE_IO_TEXTFILE"
                "RF_MODULE_REGEX" "RF_MODULE_STRINGS" "RF_MODULE_SYSTEM"
                "RF_MODULE_THREAD" "RF_MODULE_THREADX" "RF_MODULE_TIME_DATE"
                "RF_MODULE_TIME_TIMER" "RF_OPTION_DEFAULT_ARGUMENTS"
                "RF_OPTION_FGETS_READ_BYTESN=512" "RF_OPTION_FILE_ADDBOM"
                "RF_OPTION_LIST_CAPACITY_M=2"
                "RF_OPTION_LOCALSTACKMEMORY_SIZE=1048576"
                "RF_OPTION_REGEX_NODES_ALLOCMULTIPLIER=4"
                "RF_OPTION_REGEX_STACKSIZE=250"
                "RF_OPTION_STRINGX_CAPACITY_M=2"
                "RF_OPTION_THREADX_MSGQUEUE=10" "RF_OPTION_VERBOSE_ERRORS"
                "_FILE_OFFSET_BITS=64" "_GNU_SOURCE" "_LARGEFILE64_SOURCE"
                "RF_MODULE_LIST_EXTRA" "RF_MODULE_LIST")
 :include-dirs '("/home/lefteris/w/Refulib/include")
 :root-directory "~/w/Refulib")
     #+END_SRC

In the above example we can see a sample definition of a project. The name should
always be the same as the file-name of the directory where the project is located.

The rest of the arguments are self-explanatory. Attention should be brought to the
`root-directory' argument. In combination with the `same-name-check' argument they define
2 different ways to view a project.

If `same-name-check' is non nil then even if a file of the same project is visited
the c/c++ configuration will be regenerated. That is useful in situations where
multiple versions of a project exist in different directories.

Having `same-name-check' nil in those cases allows us to simultaneously develop on
the different versions of the project which reside in the different directories and
keep different defines and include directories for each. By default the value is true.

In cases where `same-name-check' is true it also makes sense to provide the
`root-directory' of the project as in the above example.
* Customization
As a user you have a choice of the completion system to choose when selecting a defined project.
As inspired by [[https://github.com/flycheck/flycheck][flycheck]]'s customization there are currently two choices offered:
- [[http://www.emacswiki.org/emacs/InteractivelyDoThings][IDO]]: the built-in completion system with fuzzy searching. Powerful though it is, one can really
improve it by using [[https://github.com/lewang/flx][flx-ido]].

- [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html][Completing Read]]: The very simple and not fancy emacs built-in completion system. Is the default.

To customize it put something like this in your init file
#+BEGIN_SRC emacs-lisp
(setq malinka-completion-system 'ido)
     #+END_SRC

* Usage
As shown in the [[#example_setup][example setup]] section the basic configuration that needs to exist in order to use malinka is to define your
projects using src_<emacs-lisp>{(malinka-define-project)}. Following that the way to interact with the defined projects is
via the following interactive API:

- =(malinka-project-add-file file-name project-name)=:
  Add a file to the given project and makes sure that the rtags daemon becomes aware of that file.

- =(malinka-project-add-include-dir include-dir project-name given-root-dir)=:
  Add an include directory to the given project and makes sure that all of the files set as compiled for this project
  are aware of it. If flycheck and clang checker also exist in the user's system the include files are sent to
  the clang syntax checker too whenever files of the project are visited.

  The =given-root-dir= argument is optional and will be asked for from the user if and only if a project root has
  not been defined for the =project-name=.

- =(malinka-project-add-cpp-define define project-name given-root-dir)=:
  Add an c preprocessor define to the given project and makes sure that all of the files set as compiled for this project
  are aware of it. If flycheck and clang checker also exist in the user's system the define is also sent to
  the clang syntax checker too whenever files of the project are visited.

  The =given-root-dir= argument is optional and will be asked for from the user if and only if a project root has
  not been defined for the =project-name=.

- =(malinka-project-add-cpp-define project-name given-root-dir)=:
  Reconfigures the project by recreating the json compilation database to pass onto rtags with whatever malinka knows
  about the project at the time the command is issued.

  This command will reload the whole configuration for the project. Depending on the size of the project it may take some
  seconds for tags to work again.

* Issues
If you have problems, bugs or feature requests feel free to open an issue in [[https://github.com/LefterisJP/malinka/issues][github]]
and I will take a look at it when I find the time.

** Common Issues

- *Can't index file*

  To get a view of the connection between Emacs and the rtags daemon you can always
  check the =*rdm*= buffer. There you can see after a ~M-x malinka-project-configure~
  if the files are indexed properly.

  If for some reason a file can't be indexed and in the =*rdm= buffer you get
  something like below:
  #+BEGIN_SRC sh
  Failed to make location from [filename:line:column]
  #+END_SRC
  Then I would suggest removing the rtags cache kept under =~/.rtags= by default
  and then redoing a ~M-x malinka-project-configure~. For now this is the only
  solution. If a better solution is found it will be documented here.

* Contribution
All contributions are welcome. If you would like to help you can open a pull request with your suggested contribution.

